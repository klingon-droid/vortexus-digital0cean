version: '3.8'

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-arcturus}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Only expose PostgreSQL internally, not to the outside world
    expose:
      - "5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
    ports:
      - "3000:3000"  # API port
      - "4001:4001"  # Telegram bot port
    environment:
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ASSISTANT_ID=${ASSISTANT_ID}
      
      # Telegram Bot Configuration
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/arcturus
      - SOLANA_URL=${SOLANA_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_ALGORITHM=${ENCRYPTION_ALGORITHM}
      
      # API Configuration
      - AI_AGENT_API_URL=http://backend:3000/prompt
      
      # Server Configuration
      - API_PORT=3000
      - TELEGRAM_PORT=4001
      
      # CORS Configuration - Use your actual domain in production
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      
      # Telegram Webhook - Use your actual domain in production
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    restart: always
    depends_on:
      - backend
    ports:
      - "8080:3000"  # Expose on port 80 for web traffic
    environment:
      # Set the API URL for the frontend to use
      - NEXT_PUBLIC_BACKEND_API_URL=${PUBLIC_API_URL:-http://localhost:3000/prompt}

  # Optional: Add nginx for SSL termination if you have a domain
  nginx:
    image: nginx:latest
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Optional: Add certbot for SSL certificates if you have a domain
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
